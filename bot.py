
import os
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
from aiogram.contrib.fsm_storage.memory import MemoryStorage

API_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

games = {}
cards_data = {
    "profession": ["–∏–Ω–∂–µ–Ω–µ—Ä", "–ø–æ–≤–∞—Ä", "—É—á–∏—Ç–µ–ª—å", "—Å–æ–ª–¥–∞—Ç", "–≤—Ä–∞—á", "—Ñ–µ—Ä–º–µ—Ä", "—Ö–∏–º–∏–∫"],
    "biology": ["–º—É–∂—á–∏–Ω–∞, 35 –ª–µ—Ç", "–∂–µ–Ω—â–∏–Ω–∞, 28 –ª–µ—Ç", "–º—É–∂—á–∏–Ω–∞, 45 –ª–µ—Ç", "–∂–µ–Ω—â–∏–Ω–∞, 22 –≥–æ–¥–∞"],
    "health": ["–∑–¥–æ—Ä–æ–≤", "–∞—Å—Ç–º–∞", "–¥–∏–∞–±–µ—Ç", "–∞–ª–ª–µ—Ä–≥–∏—è", "–ø–ª–æ—Å–∫–æ—Å—Ç–æ–ø–∏–µ"],
    "hobby": ["—à–∞—Ö–º–∞—Ç—ã", "—Å–∞–¥–æ–≤–æ–¥—Å—Ç–≤–æ", "—Ä—ã–±–∞–ª–∫–∞", "—Å–ø–æ—Ä—Ç", "–Ω–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã"],
    "baggage": ["—Ä—é–∫–∑–∞–∫ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏", "–µ–¥–∞ –Ω–∞ 3 –¥–Ω—è", "—Ñ–æ—Ç–æ–∞–ª—å–±–æ–º", "—Ä–∞–¥–∏–æ", "–∫–æ—Ç"],
    "fact": ["–±—ã–≤—à–∏–π –∑–∞–∫–ª—é—á—ë–Ω–Ω—ã–π", "–≤–æ–ª–æ–Ω—Ç—ë—Ä", "–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤—Ä–∞–ª", "—É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏"],
    "condition": ["–º–æ–∂–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å—Å—è —Ä–æ–ª—è–º–∏", "–∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ —Å–ø–∞—Å—Ç–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–≥–Ω–∞–Ω–Ω–æ–≥–æ"]
}

class Player:
    def __init__(self, user_id, name):
        self.user_id = user_id
        self.name = name
        self.cards = {}

    def assign_random_cards(self):
        for category, options in cards_data.items():
            self.cards[category] = random.choice(options)

@dp.message_handler(commands=['start'])
async def start_cmd(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë—É–Ω–∫–µ—Ä-–ë–æ—Ç!
/newgame ‚Äî —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É
/join ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
/begin ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–∑–¥–∞—á—É —Ä–æ–ª–µ–π")

@dp.message_handler(commands=['newgame'])
async def new_game(message: Message):
    chat_id = message.chat.id
    games[chat_id] = {"players": {}, "started": False}
    await message.answer("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞. –ò–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è —Å –ø–æ–º–æ—â—å—é /join")

@dp.message_handler(commands=['join'])
async def join_game(message: Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    name = message.from_user.full_name

    if chat_id not in games:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é /newgame")
        return

    game = games[chat_id]
    if game["started"]:
        await message.answer("–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å")
        return

    if user_id not in game["players"]:
        game["players"][user_id] = Player(user_id, name)
        await message.answer(f"{name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!")
    else:
        await message.answer("–í—ã —É–∂–µ –≤ –∏–≥—Ä–µ.")

@dp.message_handler(commands=['begin'])
async def begin_game(message: Message):
    chat_id = message.chat.id
    if chat_id not in games:
        await message.answer("–ò–≥—Ä–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.")
        return

    game = games[chat_id]
    if game["started"]:
        await message.answer("–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç.")
        return

    game["started"] = True
    await message.answer("–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –†–∞–∑–¥–∞—é —Ä–æ–ª–∏ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")

    for player in game["players"].values():
        player.assign_random_cards()
        card_text = "
".join([f"{k.capitalize()}: {v}" for k, v in player.cards.items()])
        try:
            await bot.send_message(player.user_id, f"üé¥ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂:
{card_text}")
        except:
            await message.answer(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ {player.name}. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –±–æ—Ç—É –≤ –ª–∏—á–∫—É.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
